# -*- coding: utf-8 -*-
"""Untitled71.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tNipo8rG5hIXzZ2-x-yJYFZHQZbSZcSi
"""

#public,protected
class A:
    _amount=1000
    __balance= 5000. #private variable
a1=A()
a1._A__balance

class a:
    _amount=1000 # act as a protected

#hide unwanted detail
# function need to implemented in child classes
# works as blue print for all subjects
# abstraction acheive => abstract class
# abtract class => anstract method
from abc import ABC,abstractmethod
class RBI(ABC):  #abstract class
    @abstractmethod
    def info(self):  #abstract method
        pass
class SBI(RBI):
    def info2(self):  #implementing abstract method from parent class
        print("interest rate 10% from sbi ")
class ICICI(RBI):
    def info(self):
        print("interest rate 12% from icici")

s1 = SBI()
s1.info()

class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.__salary = salary

    def get_salary(self):
        return self.__salary

e1 = Employee("Virendra", 50000)

print(e1.name)
print(e1.get_salary())

class teacher: